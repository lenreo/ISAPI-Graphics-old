/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.13).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.io.File;
import io.swagger.model.Graphic;
import io.swagger.model.Magnitude;
import org.threeten.bp.OffsetDateTime;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-11-15T18:00:14.538Z[GMT]")
@Api(value = "graphics", description = "the graphics API")
public interface GraphicsApi {

    @ApiOperation(value = "Añadir nueva gráfica", nickname = "addGraphic", notes = "Añadir nueva gráfica", tags={ "graphics", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Operación válida"),
        @ApiResponse(code = 405, message = "No se pudo validar"),
        @ApiResponse(code = 500, message = "Error Interno") })
    @RequestMapping(value = "/graphics",
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Long> addGraphic(@ApiParam(value = "Gráfica" ,required=true )  @Valid @RequestBody Graphic body);


    @ApiOperation(value = "Elimina una determinada gráfica por ID", nickname = "deleteGraphicById", notes = "Elimina una gráfica", tags={ "graphics", })
    @ApiResponses(value = {
        @ApiResponse(code = 400, message = "ID proporcionado no valido"),
        @ApiResponse(code = 404, message = "Gráfica no encontrada") })
    @RequestMapping(value = "/graphics/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteGraphicById(@ApiParam(value = "ID de la gráfica",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Encuentra gráficas por magnitud", nickname = "findGraphicByMagnitude", notes = "Busca las gráficas que sean de una determinada magnitud", response = Graphic.class, responseContainer = "List", tags={ "graphics", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Operación válida", response = Graphic.class, responseContainer = "List"),
        @ApiResponse(code = 405, message = "No se pudo validar") })
    @RequestMapping(value = "/graphics/findByMagnitude",
        produces = { "application/xml", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Graphic>> findGraphicByMagnitude(@NotNull @ApiParam(value = "Magnitud de las medidas", required = true) @Valid @RequestParam(value = "magnitude", required = true) Magnitude magnitude);


    @ApiOperation(value = "Genera una gráfica", nickname = "generate", notes = "Genera una gráfica dada una magnitud y un rango de fechas", response = Graphic.class, tags={ "graphics", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Operación válida", response = Graphic.class),
        @ApiResponse(code = 400, message = "Bad request. User ID must be an integer and larger than 0."),
        @ApiResponse(code = 405, message = "No se pudo validar") })
    @RequestMapping(value = "/graphics/generate",
        produces = { "application/xml", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Graphic> generate(@NotNull @ApiParam(value = "Magnitud de las medidas", required = true) @Valid @RequestParam(value = "magnitude", required = true) Magnitude magnitude,@NotNull @ApiParam(value = "Fecha de inicio del rango temporal de las medidas", required = true) @Valid @RequestParam(value = "startDate", required = true) OffsetDateTime startDate,@NotNull @ApiParam(value = "Fecha de fin del rango temporal de las medidas", required = true) @Valid @RequestParam(value = "endDate", required = true) OffsetDateTime endDate);


    @ApiOperation(value = "Devuelve el PDF de una gráfica", nickname = "generatePdf", notes = "Encontrar una determinada gráfica por ID y generar PDF", response = File.class, tags={ "graphics", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Operacion valida", response = File.class),
        @ApiResponse(code = 400, message = "ID proporcionado no valido"),
        @ApiResponse(code = 404, message = "Gráfica no encontrada") })
    @RequestMapping(value = "/graphics/{id}/toPdf",
        produces = { "application/pdf" },
        method = RequestMethod.GET)
    ResponseEntity<File> generatePdf(@ApiParam(value = "ID de la gráfica",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Devuelve el PNG de una gráfica", nickname = "generatePng", notes = "Encontrar una determinada gráfica por ID y generar PNG", response = File.class, tags={ "graphics", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Operacion valida", response = File.class),
        @ApiResponse(code = 400, message = "ID proporcionado no valido"),
        @ApiResponse(code = 404, message = "Gráfica no encontrada") })
    @RequestMapping(value = "/graphics/{id}/toPng",
        produces = { "image/png" },
        method = RequestMethod.GET)
    ResponseEntity<File> generatePng(@ApiParam(value = "ID de la gráfica",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Encontrar una determinada gráfica por ID", nickname = "getGraphicById", notes = "Devuelve una gráfica", response = Graphic.class, tags={ "graphics", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Operación válida", response = Graphic.class),
        @ApiResponse(code = 400, message = "ID proporcionado no valido"),
        @ApiResponse(code = 404, message = "Gráfica no encontrada") })
    @RequestMapping(value = "/graphics/{id}",
        produces = { "application/xml", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Graphic> getGraphicById(@ApiParam(value = "ID de la gráfica",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Envía una gráfica por email", nickname = "sendEmail", notes = "Encontrar una determinada gráfica por ID y enviarla por email", tags={ "graphics", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Operacion válida"),
        @ApiResponse(code = 400, message = "Datos de entrada no válidos"),
        @ApiResponse(code = 404, message = "Gráfica no encontrada") })
    @RequestMapping(value = "/graphics/{id}/sendEmail",
        method = RequestMethod.GET)
    ResponseEntity<Void> sendEmail(@ApiParam(value = "ID de la gráfica",required=true) @PathVariable("id") Long id,@NotNull @ApiParam(value = "Dirección de correo", required = true) @Valid @RequestParam(value = "email", required = true) String email);


    @ApiOperation(value = "Actualizar una gráfica", nickname = "updateGraphic", notes = "Actualizar una gráfica", tags={ "graphics", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Operación válida"),
        @ApiResponse(code = 400, message = "ID proporcionado no válida"),
        @ApiResponse(code = 404, message = "Gráfica no encontrada"),
        @ApiResponse(code = 405, message = "No se pudo validar"),
        @ApiResponse(code = 500, message = "Error Interno") })
    @RequestMapping(value = "/graphics",
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateGraphic(@ApiParam(value = "Gráfica" ,required=true )  @Valid @RequestBody Graphic body);

}
